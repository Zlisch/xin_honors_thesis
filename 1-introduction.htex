\chapter{Introduction}

Distributed systems consist of multiple endpoints that communicate by 
exchanging messages, operating with asynchrony and parallelism as these 
messages are sent and received between the various endpoints. But programming 
distributed system is notoriously error-prone as programmer has to implement 
the communication protocol by developing individual endpoint programs. Mismatched 
message sending and receiving can lead to errors such as \emph{deadlock}, where 
the system is waiting forever for a message.

\emph{Choreography} arises as a programming diagram to address this issue by providing a 
concrete global description of how the messages are exchanged between endpoints
in a distributed system. A choreography program is written in a similar style to the 
"Alice and Bob" notation by \cite{needham_using_1978}: 
\begin{center}
    \begin{tabular}{rl}
      \texttt{1.} & \texttt{Alice} $\to$ \texttt{Bob} $: key$ \\
      \texttt{2.} & \texttt{Bob} $\to$ \texttt{Alice} $: message$ \\
    \end{tabular}
\end{center}
Thus message mismatches are disallowed from the choreographic 
perspective. A property we refer to as \emph{deadlock free by design}. 
The global choreography is then projected into process models for each 
endpoint via EndPoint Projection (EPP), with properties such as 
deadlock free by design preserved \citep{hallal_global_2018}.

While most choreography languages focus on the message exchange behaviours, 
few pay attention to the local computation happening in the 
individual endpoint. It is shown by \cite{hirsch_pirouette_2022} that as 
long as the local language exhibits type preservation and 
progress, the choreography is deadlock free by design. Thus 
when studying message exchange behaviours for choreography such as 
multiparty sessions, asynchrony, and parallelism one can safely assume 
good behaviours of local computation \citep{montesi_compositional_2013, cruz2017core, carbone_deadlock-freedom-by-design_2013}.
But when it comes to 

Plan for the introduction:
- what is a choreography, why is it desired (what brings to the idea of choreography): 
what is deadlock-free; also deadlock freedom by design
- CC: minimal design, not implementation-specific, foundamental model for studying choreography, elegant
- What is Kalas and what it does well; what it can be impoved and why interesting
- how different choreographies handle local computations and why a simplification is desired
- research question

- Contribution
- contreibution: simple typing system for choreography???

- Thesis Structure
