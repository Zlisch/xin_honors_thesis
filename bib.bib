@inproceedings{pohjola_kalas_2022,
	title={Kalas: A verified, end-to-end compiler for a choreographic language},
  	author={Pohjola, Johannes {\AA}man and G{\'o}mez-Londo{\~n}o, Alejandro and Shaker, James and Norrish, Michael},
  	booktitle={13th International Conference on Interactive Theorem Proving (ITP 2022)},
  	year={2022},
  	organization={Schloss-Dagstuhl-Leibniz Zentrum f{\"u}r Informatik}
}

@inproceedings{thiemann_intrinsically-typed_2019,
	location = {New York, {NY}, {USA}},
	title = {Intrinsically-Typed Mechanized Semantics for Session Types},
	isbn = {978-1-4503-7249-7},
	url = {https://dl.acm.org/doi/10.1145/3354166.3354184},
	doi = {10.1145/3354166.3354184},
	series = {{PPDP} '19},
	abstract = {Session types have emerged as a powerful paradigm for structuring communication-based programs. They guarantee type soundness and session fidelity for concurrent programs with sophisticated communication protocols. As type soundness proofs for languages with session types are tedious and technically involved, it is rare to see mechanized soundness proofs for these systems.We present an executable intrinsically typed small-step semantics for a realistic functional session type calculus. The calculus includes linearity, recursion, and recursive sessions with subtyping. Asynchronous communication is modeled with an encoding.The semantics is implemented in Agda as an intrinsically typed, interruptible {CEK} machine. This implementation proves type preservation and a particular notion of progress by construction.},
	pages = {1--15},
	booktitle = {Proceedings of the 21st International Symposium on Principles and Practice of Declarative Programming},
	publisher = {Association for Computing Machinery},
	author = {Thiemann, Peter},
	urldate = {2024-09-22},
	date = {2019-10-07},
	year = {2019},
	file = {Full Text PDF:/Users/mac/Zotero/storage/CAA9GSK7/Thiemann - 2019 - Intrinsically-Typed Mechanized Semantics for Sessi.pdf:application/pdf},
}

@inproceedings{caires_session_2010,
	location = {Berlin, Heidelberg},
	title = {Session Types as Intuitionistic Linear Propositions},
	isbn = {978-3-642-15375-4},
	doi = {10.1007/978-3-642-15375-4_16},
	abstract = {Several type disciplines for π-calculi have been proposed in which linearity plays a key role, even if their precise relationship with pure linear logic is still not well understood. In this paper, we introduce a type system for the π-calculus that exactly corresponds to the standard sequent calculus proof system for dual intuitionistic linear logic. Our type system is based on a new interpretation of linear propositions as session types, and provides the first purely logical account of all (both shared and linear) features of session types. We show that our type discipline is useful from a programming perspective, and ensures session fidelity, absence of deadlocks, and a tight operational correspondence between π-calculus reductions and cut elimination steps.},
	pages = {222--236},
	booktitle = {{CONCUR} 2010 - Concurrency Theory},
	publisher = {Springer},
	author = {Caires, Luís and Pfenning, Frank},
	editor = {Gastin, Paul and Laroussinie, François},
	year = {2010},
	langid = {english},
	keywords = {Label Transition System, Linear Logic, Parallel Composition, Sequent Calculus, Type System},
	file = {Full Text PDF:/Users/mac/Zotero/storage/6XDIUDG3/Caires and Pfenning - 2010 - Session Types as Intuitionistic Linear Proposition.pdf:application/pdf},
}

@inproceedings{hallal_global_2018,
	title = {From Global Choreography to Efficient Distributed Implementation},
	url = {https://ieeexplore.ieee.org/abstract/document/8514427?casa_token=B9uMnW0mxFEAAAAA:DMmhwgQZJnHAX6o6p-EHBs4K9rct4pEKen9fdt2CXHC6NOWZxpHT5FSZZFAchGBDjiqmPeviH1U},
	doi = {10.1109/HPCS.2018.00122},
	abstract = {We define a methodology to automatically synthesize efficient distributed implementation starting from highlevel global choreography. A global choreography describes the communication logic between the interfaces of a set of predefined processes. The operations provided by the choreography (e.g., multiparty, choice, loop, branching) are master-triggered and conflict-free by construction (no conflict parallel interleaving), which permits the generation of fully distributed implementations (i.e., no need for controllers). We apply our methodology by automatically synthesizing micro-services architectures.},
	eventtitle = {2018 International Conference on High Performance Computing \& Simulation ({HPCS})},
	pages = {756--763},
	booktitle = {2018 International Conference on High Performance Computing \& Simulation ({HPCS})},
	author = {Hallal, Rayan and Jaber, Mohamad and Abdallah, Rasha},
	urldate = {2024-09-23},
	date = {2018-07},
	year = {2018},
	keywords = {Computational modeling, Computer science, Electronic mail, Process control, Protocols, Semantics, Syntactics},
	file = {IEEE Xplore Abstract Record:/Users/mac/Zotero/storage/FMNA83I3/8514427.html:text/html;IEEE Xplore Full Text PDF:/Users/mac/Zotero/storage/E4IJGQZG/Hallal et al. - 2018 - From Global Choreography to Efficient Distributed .pdf:application/pdf},
}
@inproceedings{cruz2017core,
  title={A core model for choreographic programming},
  author={Cruz-Filipe, Lu{\'\i}s and Montesi, Fabrizio},
  booktitle={Formal Aspects of Component Software: 13th International Conference, FACS 2016, Besan{\c{c}}on, France, October 19-21, 2016, Revised Selected Papers 13},
  pages={17--35},
  year={2017},
  organization={Springer}
}

@book{montesi_choreographic_2014,
	title = {Choreographic Programming},
	isbn = {978-87-7949-299-8},
	series = {{ITU}-{DS}},
	abstract = {Choreographies are descriptions of distributed systems where the developer gives a global view of how messages are exchanged by endpoint nodes (endpoints for short), instead of separately defining the behaviour of each endpoint. They have a significant impact on the quality of software, as they offer a concise view of the message flows enacted by a system. For this reason, in the last decade choreographies have been used in the development of programming languages, giving rise to a programming paradigm that in this dissertation we refer to as Choreographic Programming.Recent studies show that choreographies have potential as foundations for the development of safe distributed software. The key idea is that since choreographies abstract from the single input/output actions of endpoints, they avoid typical safety problems such as deadlocks and race conditions; the concrete implementation of each endpoint described in a choreography can then be automatically generated, ensuring that such implementations are safe by construction. However, current formal models for choreographies do not deal with critical aspects of distributed programming, such as asynchrony, mobility, modularity, and multiparty sessions; it remains thus unclear whether choreographies can still guarantee safety when dealing with such nontrivial features.This {PhD} dissertation argues for the suitability of choreographic programming as a paradigm for the development of safe distributed systems. We proceed by investigating its foundations and application. To this aim, we provide three main contributions.The first contribution is the development of a formal model for choreographic programming that supports asynchrony, mobility, modularity, and multiparty sessions. In the model, choreographies are projected to distributed endpoint code in terms of the π-calculus. Projection preserves the expected safety properties of choreographies, among which freedom from deadlocks and race conditions.The second contribution is the development of Linear Connection Logic ({LCL}), an extension of linear logic. We propose a Curry-Howard correspondence between {LCL} and a calculus of choreographies, proving that: (i) proofs in {LCL} correspond to choreographies; and (ii) proof transformations in {LCL} yield procedures for compiling choreographies to endpoint programs and vice versa. The latter result, known as round-trip development, contributes to the open problem of extracting choreographies from existing endpoint programs.The third contribution is the implementation of a prototype framework for choreographic programming, called Chor. Chor provides an Integrated Development Environment ({IDE}) for programming with choreographies, equipped with a type checker for verifying their correctness based on our formal development. Programs in Chor can be compiled to executable endpoint code in Jolie, a language for distributed programming. We use Chor for evaluating choreographic programming against a series of use cases.},
	publisher = {{IT}-Universitetet i København},
	author = {Montesi, Fabrizio},
	year = {2014},
}

@inproceedings{montesi_compositional_2013,
	location = {Berlin, Heidelberg},
	title = {Compositional Choreographies},
	isbn = {978-3-642-40184-8},
	doi = {10.1007/978-3-642-40184-8_30},
	abstract = {We propose a new programming model that supports a compositionality of choreographies. The key of our approach is the introduction of partial choreographies, which can mix global descriptions with communications among external peers. We prove that if two choreographies are composable, then the endpoints independently generated from each choreography are also composable, preserving their typability and deadlock-freedom. The usability of our framework is demonstrated by modelling an industrial use case implemented in a tool for Web Services, Jolie.},
	pages = {425--439},
	booktitle = {{CONCUR} 2013 – Concurrency Theory},
	publisher = {Springer},
	author = {Montesi, Fabrizio and Yoshida, Nobuko},
	editor = {D’Argenio, Pedro R. and Melgratti, Hernán},
	year = {2013},
	langid = {english},
	keywords = {External Process, Parallel Composition, Service Process, Session Type, Typing Judgement},
	file = {Full Text PDF:/Users/mac/Zotero/storage/5VSAWNYV/Montesi and Yoshida - 2013 - Compositional Choreographies.pdf:application/pdf},
}

@inproceedings{bettini_global_2008,
	location = {Berlin, Heidelberg},
	title = {Global Progress in Dynamically Interleaved Multiparty Sessions},
	isbn = {978-3-540-85361-9},
	doi = {10.1007/978-3-540-85361-9_33},
	abstract = {A multiparty session forms a unit of structured interactions among many participants which follow a prescribed scenario specified as a global type signature. This paper develops, besides a more traditional communication type system, a novel static interaction type system for global progress in dynamically interleaved multiparty sessions.},
	pages = {418--433},
	booktitle = {{CONCUR} 2008 - Concurrency Theory},
	publisher = {Springer},
	author = {Bettini, Lorenzo and Coppo, Mario and D’Antoni, Loris and De Luca, Marco and Dezani-Ciancaglini, Mariangiola and Yoshida, Nobuko},
	editor = {van Breugel, Franck and Chechik, Marsha},
	year = {2008},
	langid = {english},
	keywords = {Action Type, Message Type, Operational Semantic, Type System, Typing Rule},
	file = {Full Text PDF:/Users/mac/Zotero/storage/Z6TYBWTR/Bettini et al. - 2008 - Global Progress in Dynamically Interleaved Multipa.pdf:application/pdf},
}

@article{hirsch_pirouette_2022,
	title = {Pirouette: higher-order typed functional choreographies},
	volume = {6},
	url = {https://dl.acm.org/doi/10.1145/3498684},
	doi = {10.1145/3498684},
	shorttitle = {Pirouette},
	abstract = {We present Pirouette, a language for typed higher-order functional choreographic programming. Pirouette offers programmers the ability to write a centralized functional program and compile it via endpoint projection into programs for each node in a distributed system. Moreover, Pirouette is defined generically over a (local) language of messages, and lifts guarantees about the message type system to its own. Message type soundness also guarantees deadlock freedom. All of our results are verified in Coq.},
	pages = {23:1--23:27},
	issue = {{POPL}},
	journaltitle = {Proc. {ACM} Program. Lang.},
	author = {Hirsch, Andrew K. and Garg, Deepak},
	urldate = {2024-09-24},
	date = {2022-01-12},
	year = {2022},
	file = {Full Text PDF:/Users/mac/Zotero/storage/M8FJQ7DL/Hirsch and Garg - 2022 - Pirouette higher-order typed functional choreogra.pdf:application/pdf},
}

@inproceedings{cruz-filipe_functional_2022,
	title={Functional choreographic programming},
  	author={Cruz-Filipe, Lu{\'\i}s and Graversen, Eva and Lugovi{\'c}, Lovro and Montesi, Fabrizio and Peressotti, Marco},
  	booktitle={International Colloquium on Theoretical Aspects of Computing},
  	pages={212--237},
  	year={2022},
  	organization={Springer}
}

@article{needham_using_1978,
	title = {Using encryption for authentication in large networks of computers},
	volume = {21},
	issn = {0001-0782},
	url = {https://dl.acm.org/doi/10.1145/359657.359659},
	doi = {10.1145/359657.359659},
	abstract = {Use of encryption to achieve authenticated communication in computer networks is discussed. Example protocols are presented for the establishment of authenticated connections, for the management of authenticated mail, and for signature verification and document integrity guarantee. Both conventional and public-key encryption algorithms are considered as the basis for protocols.},
	pages = {993--999},
	number = {12},
	journaltitle = {Commun. {ACM}},
	author = {Needham, Roger M. and Schroeder, Michael D.},
	urldate = {2024-09-25},
	date = {1978-12-01},
	year = {1978},
	file = {Full Text PDF:/Users/mac/Zotero/storage/MHFB9PZ4/Needham and Schroeder - 1978 - Using encryption for authentication in large netwo.pdf:application/pdf},
}

@article{carbone_deadlock-freedom-by-design_2013,
	title = {Deadlock-freedom-by-design: multiparty asynchronous global programming},
	volume = {48},
	issn = {0362-1340},
	url = {https://dl.acm.org/doi/10.1145/2480359.2429101},
	doi = {10.1145/2480359.2429101},
	shorttitle = {Deadlock-freedom-by-design},
	abstract = {Over the last decade, global descriptions have been successfully employed for the verification and implementation of communicating systems, respectively as protocol specifications and choreographies. In this work, we bring these two practices together by proposing a purely-global programming model. We show a novel interpretation of asynchrony and parallelism in a global setting and develop a typing discipline that verifies choreographies against protocol specifications, based on multiparty sessions. Exploiting the nature of global descriptions, our type system defines a new class of deadlock-free concurrent systems (deadlock-freedom-by-design), provides type inference, and supports session mobility. We give a notion of Endpoint Projection ({EPP}) which generates correct entity code (as pi-calculus terms) from a choreography. Finally, we evaluate our approach by providing a prototype implementation for a concrete programming language and by applying it to some examples from multicore and service-oriented programming.},
	pages = {263--274},
	number = {1},
	journaltitle = {{SIGPLAN} Not.},
	author = {Carbone, Marco and Montesi, Fabrizio},
	year = {2013},
	file = {Full Text PDF:/Users/mac/Zotero/storage/LQTTRFHV/Carbone and Montesi - 2013 - Deadlock-freedom-by-design multiparty asynchronou.pdf:application/pdf},
}

@inproceedings{slind2008brief,
  title={A brief overview of HOL4},
  author={Slind, Konrad and Norrish, Michael},
  booktitle={International Conference on Theorem Proving in Higher Order Logics},
  pages={28--32},
  year={2008},
  organization={Springer}
}

@article{montesi2017choreographies,
  title={Choreographies meet communication failures},
  author={Montesi, Fabrizio and Peressotti, Marco},
  journal={arXiv preprint arXiv:1712.05465},
  year={2017}
}

@article{giallorenzo2024choral,
  title={Choral: Object-oriented choreographic programming},
  author={Giallorenzo, Saverio and Montesi, Fabrizio and Peressotti, Marco},
  journal={ACM Transactions on Programming Languages and Systems},
  volume={46},
  number={1},
  pages={1--59},
  year={2024},
  publisher={ACM New York, NY}
}

@book{pierce2002types,
  title={Types and programming languages},
  author={Pierce, Benjamin C},
  year={2002},
  publisher={MIT press}
}

@inproceedings{owens2016functional,
  title={Functional big-step semantics},
  author={Owens, Scott and Myreen, Magnus O and Kumar, Ramana and Tan, Yong Kiam},
  booktitle={Programming Languages and Systems: 25th European Symposium on Programming, ESOP 2016, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2016, Eindhoven, The Netherlands, April 2--8, 2016, Proceedings 25},
  pages={589--615},
  year={2016},
  organization={Springer}
}

@book{mullender1990distributed,
  title={Distributed systems},
  author={Mullender, Sape},
  year={1990},
  publisher={ACM}
}

@techreport{w3c2004wsdl,
  author       = "{W3C WS-CDL Working Group}",
  title        = "{Web Services Choreography Description Language Version 1.0}",
  institution  = "{World Wide Web Consortium (W3C)}",
  year         = 2005,
  month        = apr,
  url          = "http://www.w3.org/TR/2004/WD-ws-cdl-10-20040427/",
  note         = "Accessed: October 14, 2024"
}

@inproceedings{carbone2007structured,
  title={Structured communication-centred programming for web services},
  author={Carbone, Marco and Honda, Kohei and Yoshida, Nobuko},
  booktitle={Programming Languages and Systems: 16th European Symposium on Programming, ESOP 2007, Held as Part of the Joint European Conferences on Theory and Practics of Software, ETAPS 2007, Braga, Portugal, March 24-April 1, 2007. Proceedings 16},
  pages={2--17},
  year={2007},
  organization={Springer}
}

@book{hardin2021concepts,
  title={Concepts and semantics of programming languages 1: a semantical approach with OCaml and Python},
  author={Hardin, Therese and Jaume, Mathieu and Pessaux, Francois and Donzeau-Gouge, Veronique Viguie},
  year={2021},
  publisher={John Wiley \& Sons}
}

@article{abel2019poplmark,
  title={POPLMark reloaded: Mechanizing proofs by logical relations},
  author={Abel, Andreas and Allais, Guillaume and Hameer, Aliya and Pientka, Brigitte and Momigliano, Alberto and Sch{\"a}fer, Steven and Stark, Kathrin},
  journal={Journal of Functional Programming},
  volume={29},
  pages={e19},
  year={2019},
  publisher={Cambridge University Press}
}

@misc{hol_cbv_lc,
  author       = {Scott Owens and Theo Laurent},
  title        = {Prove that simply typed call-by-value lambda calculus programs always terminate},
  year         = {2016},
  url          = {https://github.com/HOL-Theorem-Prover/HOL/tree/develop/examples/fun-op-sem/cbv-lc},
  note         = {Accessed: 2024-10-19}
}
